# SMART-GH Route Planner

SMART-GH extends graphhopper (https://graphhopper.com/) ,which is a fast and memory efficient Java road routing engine released under Apache License 2.0, with a smart and personalized dimension. 
SMART-GH integrates real time data captured from sensors, utilizing citizens as sensors, and enables the user to submit smart and personalized routing requests:

	- Transport mode: car, foot, bike, mtb and racing bike.
	- Quality of route: fastest, shortest, least noisy, least air polluted, least polluted (combination of sensors).

GraphHopper is tuned towards road networks with OpenStreetMap data but can be useful for public transport problems as well.

SMART-GH Pre-requisites:
-----------------------
 
 * SMART-GH is built using Maven, so you need to have Maven and Java installed and configured on your computer (http://maven.apache.org/download.cgi)
 * SMART-GH uses Redis to store and maintain sensors data, so you need to have Redis running:
	- Linux: (http://redis.io/download)
	- Windows: One click Redis install as a Windows service(https://github.com/rgl/redis/downloads)
 * Windows user must install Cygwin: https://www.cygwin.com/
 * Tomcat is a J2EE-compliant server that can be used to serve RESTful webservices 
        - Linux: (sudo apt-get install tomcat7  or equivalent for your flavour of linux)
        - Windows: Use the official packaged installer from Tomcat (http://tomcat.apache.org/)
 * Sensor data: To download, reverse-geocode and transform sensor data into a format usable by SMART-GH, python is required. Any version >2.6 will do (but not version 3). 
   Having installed python, install the required libraries using the `pip' command. 
	- (sudo, if required) pip install -r requirements.txt
	- Windows: 
			  - download get-pip.py from:http://stackoverflow.com/questions/4750806/how-to-install-pip-on-windows
			  - Run "python get-pip.py"
			  - Run "C:\PythonXX\Tools\Scripts\win_add2path.py"
			  - Run "pip install -r requirements.txt"
		
Get Started with SMART-GH
-------------------------

 1. Clone SMART-GH: https://github.com/DIVERSIFY-project/SMART-GH.git
 2. Copy dublin-m50.osm map (https://www.dropbox.com/s/ozo6nowib7dcfbj/dublin-m50.osm?dl=0) to SMART-GH/maps
	- For sensor-based routing to work correctly, all maps should be placed in maps folder, and should be named following this naming convention: city-*.osm; e.g.,paris-centre.osm
 3. Make sure that 'config.properties' file exists inside SMART-GH folder, and that it satisfies these settings: https://www.dropbox.com/s/bsnkxc3vtgax0tf/config.properties?dl=0
 4. Run Sensor parsing Daemon:
	- Go to SMART-GH/sensor_processing
	- run "python process_sensor_data_daemon.py"
 5. Run "mvn -DskipTests install" (use Cygwin if you are using Windows)
 6. SMART-GH's core routing is split into two parts: webservices, and the web-interface
        # Install the SMART-GH webservices
                * Change into the daemon-wservice directory ("cd daemon-wservice")
                * Create & install the 'war' file, using the following commands:
                        - "mvn clean"
                        - "mvn package" (This creates a 'war' file)
                        - "sudo cp target/restful-graphhopper-1.0.war /var/lib/tomcat7/webapps/"
                        - If not already started, start tomcat. 
                        - Note the IP/url of the machine that is hosting the webservice and the port where tomcat is running
        # Install the SMART-GH web-interface
                * From SMART-GH root directory, issue the following commands:
                        - "export WS_CONFIG=http://<IP/Url:port>" where IP/Url and port are values noted from the previous step
                        - "./smartghweb.sh web"


Using the Sensors' Data
-----------------------
If you have access to your own sensor data, and want SMART-GH to make use of it 
while routing, take a look at the config file inside 'sensors-config-files' directory.
Add your own sensor, and implement the parser that parses your sensors' data
and feeds it into Redis.

If you don't have access to your own sensor data, you can still play around with
the data we have for Dublin city. 'dublin_db.rdb' contains the sensor data that 
we have and is located in the 'sensor_processing' directory. Please point your
redis server to that file (copy it to any location you prefer), and you're good
to go! 

Contributing Sensor Data
------------------------
There are two ways to add sensor data:

 1. Create a web-service that can access sensor-data
        * Add the name of this web-service to the config file
        * Write a parser to parse through your data, filter it, etc.
        * Add your sensor to the config file
        * Run the sensor parsing daemon (as above, in 'Getting Started')
 2. Contact us with details about your sensors. If they pertain to Dublin 
(for the moment, we're only using Dublin), then we can implement a parser for you

 
Features
---------

 * Written in Java
 * Open Source
 * Memory efficient and fast
 * Highly customizable
 * Works on the desktop, as a web service and offline on Android
 * Well tested
 * Supports smart and personalized routing requests.
 * ...
 
 
